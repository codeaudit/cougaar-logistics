<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
     
  <meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
     
  <meta name="Generator" content="Microsoft Word 97">
  <title>Data Gatherer Design</title>
   
</head>
 <body>
<font size="1">
<p align="Right">March, 2001</p>
<p align="Right"> Ben Lubin (blubin@bbn.com)</p>
</font><b><font face="Arial" size="4">
<p>The Data Gatherer Design</p>
</font><i><font face="Arial">
<p>Motivation:</p>
</font></i></b>
<p>At a high level, the job of the Data Gatherer is very straightforward: 
to combine data from all the target clusters into a data structure that contains 
a coherent and complete view of the transportation problem. </p>
<b><i><font face="Arial">
<p>Server Requirements:</p>
</font></i></b>
<p>With this background in mind, it seems worth trying to list at least most 
of the high level requirements of the new server (several of these are not 
properly handled by the current one):</p>
<ul>
  <li>The purpose of the Data Gatherer is to query various datagrabber PSPs 
for data and coordinate the information from those PSPs into a comprehensive 
data structure that describes the overall state of the transportation problem. 
 Various clients (currently 2) can then request data from the Data Gatherer 
for display.</li>
</ul>
<ul>
  <li>The Server needs to attempt to produce a single, error-free view of 
the world – a "correct" snapshot.  In order to do this, it will need to poll 
all of its PSPs <i>transactionally</i>, in an attempt to properly co-ordinate 
the data across them.  Because Cougaar is asynchronous, there is no guarantee 
that things will be consistent even within these transactions.  The Server 
must then validate the data as best it can and omit what it must to produce 
the most consistent view possible.</li>
</ul>
<ul>
  <li>The Server must be able to request information from _different_ PSPs, 
not just separate instances of the same PSP in separate clusters.  (ie Subordinates 
PSP, Itinerary PSP and Population PSP)</li>
</ul>
<ul>
  <li>In order to gather the information in a reasonable amount of time, the
Data Gatherer needs to be able to request information from the PSPs in parallel.</li>
</ul>
<ul>
  <li>The Server needs to be able to use the information from the reply of 
one PSP type in order to know which PSPs of another type to request information 
from (ie talk to the Itinerary and Population PSPs based on the Subordinates 
PSP).  Also, the data coming back from one PSP type should be verified for 
internal consistency as well as against the data from other PSP's when possible 
(i.e. verify the Itinerary PSP's Carriers against the Population's results).</li>
</ul>
<ul>
  <li>The Server needs to be able to serve multiple client requests in parallel.</li>
</ul>
<ul>
  <li>The Server needs to be able to "reload" the data from the PSPs.  During 
the time that it is doing this, client requests must either be blocked, or 
they must refer to a cached set of data.  </li>
</ul>
<ul>
  <li>The user should be able to request these reload events and (optionally) 
they should occur periodically.</li>
</ul>
<ul>
  <li>When the data in the server has changed, the clients should be able 
to poll to see this (we will not worry about doing a server side push of this).
 Additionally, data leaving the server upon a query should be time stamped
with the time when the data-store was last written to.  That way a client
can tell if two subsequent requests are out of synch with each other.  We
are NOT going to worry about performing diff-based updates between either 
the PSPs and the server, or the Server and the clients -- inconsistent data 
will force a complete refresh.</li>
</ul>
<ul>
  <li>The user should be able to request (or it should happen automatically?) 
for the data in the internal storage to be persisted some how (either in a
DB table or a flat file).  The user should then be able to request for the
server to load data back up from this persistent storage.</li>
</ul>
<ul>
  <li>There is a lot of data, and the Server should be as responsive as possible 
in obtaining and serving it.</li>
</ul>
<ul>
  <li>Correctness, stability and ease of maintenance!</li>
</ul>
<b><i><font face="Arial">
<p>Designs:</p>
</font></i></b>
<p>Trying to take all of these goals in mind, The following architecture has
been developed:</p>
<p><img src="Image2.gif" width="474" height="355">
</p>
<p>Here you can see an expanded set of simplified PSPs each supplying data 
for a data grabber.  The data grabber reads this data and writes it into a
SQL data base.  The clients make JDBC quieries against this database and produce
objects useful for display purposes.   The Itinerary PSP will be re-written
to provide only Leg information, and will refer to CarrierIDs and AssetIDs.
 These IDs will refer to detailed information provided in the Population
and Instance PSPs respectively.  The Instance PSP will, among other things,
relate the AssetID with a PrototypeID, which will refer to a prototype that
can be obtained from the Prototype PSP.  Additionally there will be an Owner
PSP that will relate Assets to their owning organization.</p>
<p>The following diagram shows the inside of the data grabber:</p>
<p><img src="Image3.gif" width="477" height="357">
</p>
<p>Here you can see a single control thread that gets input from the user 
and directs a set of slave threads to do the actual data gathering and SQLizing.</p>
<b><i><font face="Arial">
<p>Data Gatherer Database Schema:</p>
</font></i></b>
<p>Here is a specification for the Database (note that column names may not 
match exactly what is given, but will be close (usually all lowercase)):</p>
<font face="Arial">
<p>Identifiers:</p>
</font><font face="Courier New" size="2">
<p>ConveyanceID = UID of the conveying object (Ship, Plane, etc)</p>
<p>AssetID = UID of the asset being carrieried (this can be a palette, container, 
milvan OR their contents)</p>
<p>LegID = unique ID of a block of time for either the conveyance or the asset</p>
<p>OrgID = unique ID for an organization</p>
<p>AssetPrototypeID = unique ID for the prototype of an asset</p>
<p>ConveyancePrototypeID = unique ID for the prototype of a conveyance</p>
<p>LocationID = unique ID for a location</p>
<p>RunID = unique ID for each set of queries against the TARGET society</p>
</font><font face="Arial">
<p>Enums:</p>
</font><font face="Courier New" size="2">
<p>Status = {STARTED, COMPLETED, WARNING, CANCELED, ERROR, TIMEOUT}</p>
<p>LegType = {TRANSPORTING (Actual transport -- only one guaranteed to have 
no overlaps for a given asset or for a given conveyance), LOADING, UNLOADING, 
POSITIONING, RETURNING, etc}</p>
<p>AssetClass = {class 1 - 10}</p>
<p>AssetType = {ASSET, CONTAINER (Container, Milvan or Pallet)}</p>
<p>ConveyanceType = {SELF-PROP, TRUCK, TRAIN, PLANE, SHIP}</p>
<p>RelationshipType = {SUPERIOR, etc}</p>
</font><font face="Arial">
<p>Data Tables:</p>
</font>
<p><b><i><font face="Courier New" size="2">assetitinerary_$RunID</font></i></b>
  "Ties assets to legs"</p>
<p>AssetID | LegID</p>
<p><b><i><font face="Courier New" size="2" color="#c0c0c0">assetitinerarydetail_$RunID</font></i></b>
  "Provides details about the asset on the leg.  Not built now, but may be 
needed in the future"</p>
<p>AssetID | LegID | StorageLocation (Decks for Ship Legs)</p>
<p><b><i><font face="Courier New" size="2" color="#c0c0c0">stationaryleg_$RunID</font></i></b>
  "Describes blocks of time when assets are not on carriers -- no guarantee 
that time will actually tile completely.  Not built now, but may be needed 
in the future"</p>
<p>unique LegID | StartTime | EndTime | LocationID | LegType</p>
<p><font face="Courier New" size="2"><b><i>conveyedleg_$RunID</i></b> "Describes 
leg of the conveyances"</font></p>
<p><font face="Courier New" size="2">unique LegID | StartTime | EndTime | 
ReadyAt | EarliestEnd | BestEnd | LatestEnd | StartLoc (LocationID) | EndLoc 
(LocationID) | LegType | ConveyanceID</font></p>
<p><font face="Courier New" size="2"><b><i>assetinstance_$RunID</i></b> "Asset 
Info"</font></p>
<p><font face="Courier New" size="2">unique AssetID | Aggregate # | OwnerID 
(OrgID leaf in OrgTable) | AssetPrototypeID</font></p>
<p><font face="Courier New" size="2"><b><i>assetprototype_$RunID</i></b> "Asset
prototype information (Pallets/Containers will likely each require their
own prototype)"</font></p>
<p><font face="Courier New" size="2">unique AssetPrototypeID | ParentPrototypeID 
| AssetClass | AssetType | Weight | Width | Height | Depth | TypeIdentification 
| Nomenclature</font></p>
<p><b><i><font face="Courier New" size="2" color="#c0c0c0">containercontents_$RunID</font></i></b>
  "Ties contents to their containers. Not built now, but may be needed in 
the future "</p>
<p>ContainerID (AssetID) | ContentsID (AssetID)</p>
<p><font face="Courier New" size="2"><b><i>conveyanceinstance_$RunID</i></b>
  "Conveyer Info"</font></p>
<p><font face="Courier New" size="2">unique ConveyanceID | BumperNo | HomeBase 
(LocationID) | Owner (OrgID) | ConveyancePrototypeID</font></p>
<p><font face="Courier New" size="2"><b><i>conveyanceprototype_$RunID</i></b>
  "Conveyance prototype information"</font></p>
<p><font face="Courier New" size="2">ConveyancePrototypeID | ConveyanceType 
| Volume Capacity | Weight Capacity | Average Speed | TypeIdentification |
Nomenclature</font></p>
<p><font face="Courier New" size="2"><b><i>locations_$RunID</i></b> "Location 
info"</font></p>
<p><font face="Courier New" size="2">unique LocationID | lat | long | GeoLoc 
| ICAO | PrettyName</font></p>
<p><font face="Courier New" size="2"><b><i>orgroots_$RunID</i></b> "Who the 
org roots are for each society.  Society is one of 'TOPS' and 'DEMAND'"</font></p>
<p><font face="Courier New" size="2">OrgID | Society</font></p>
<p><font face="Courier New" size="2"><b><i>orgnames_$RunID</i></b> "Names 
of organizations"</font></p>
<p><font face="Courier New" size="2">OrgID | PrettyName</font></p>
<p><font face="Courier New" size="2"><b><i>org_$RunID</i></b> "Org Info. 
Note: we are not taking time varying relationships into account – we could 
do so by providing start and end times. RelationType is {0=ADMIN_SUBORDINATE, 
1=SUBORDINATE}"</font></p>
<p><font face="Courier New" size="2">OrgID | RelatedID (OrgID) | RelationType</font></p>
<p><font face="Courier New" size="2"><b><i>orgdescend_$RunID</i></b> "For 
every OrgID, this table will contain a row for every descendent.  It is not 
clear what to do here for time varying relationships – probably add start 
and end times, but the table would get very large.  We are only going to deal
with SUBORDINATE and ADMIN_SUBORDINATE relations, and for now we will treat
them identically"</font></p>
<p><font face="Courier New" size="2">OrgID | DescendentID (OrgID)</font></p>
<p><font face="Arial">AdministrativeTables:</font></p>
<p><b><i><font face="Courier New" size="2">logtabl</font></i><u>e</u></b>
  "sequence is maintained to ensure correct ordering for matching times – 
things occur faster than the minimum time interval on some databases"</p>
<p>Sequence | Time | Severity | Type | RunID | Message | Exception</p>
<b><i>
<p>runtable</p>
</i></b>
<p>RunID | StartTime | EndTime | Status</p>
<b><i><font face="Arial">
<p>PSPs:</p>
</font></i></b>
<p>PSPs -- The DATA_GATHER PSP divides into several smaller data sets and 
allows access to this data.</p>
<p>In all the Data Gatherer uses a new enhanced version of the Hierarchy PSP
and the following subsections of the DataGatherer PSP:</p>
<ul>
  <li>Population </li>
  <li>Prototypes</li>
  <li>Instances</li>
  <li>Locations</li>
  <li>Legs</li>
</ul>
<p>It is likely that in the future a containerContents PSP may be required 
as well if we want to store that information.</p>
</body>
</html>
