;!generate: org.cougaar.tools.build.PGWriter

; <copyright>
;  
;  Copyright 1997-2004 BBNT Solutions, LLC
;  under sponsorship of the Defense Advanced Research Projects
;  Agency (DARPA).
; 
;  You can redistribute this software and/or modify it under the
;  terms of the Cougaar Open Source License as published on the
;  Cougaar Open Source Website (www.cougaar.org).
; 
;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
;  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
;  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
;  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
;  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
;  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
;  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
;  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
;  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
;  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
;  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;  
; </copyright>
;

package=org.cougaar.logistics.plugin.inventory

import=org.cougaar.logistics.plugin.inventory.InventoryPlugin,\
	org.cougaar.glm.ldm.asset.Inventory,\	
	org.cougaar.glm.ldm.asset.Organization

[LogisticsInventoryPG]
slots=Asset resource, \
      double capacity, \
      boolean fillToCapacity, \
      long supplierArrivalTime, \
      double initialLevel, \
      boolean isLevel2, \
      Organization org
delegates=LogisticsInventoryBG logInvBG

logInvBG.delegate= void initialize(long today, int critLevel, int reorderPeriod, int ost, long bucketSize, long now, boolean logToCSV, InventoryPlugin parentPlugin); \
	void addWithdrawProjection(Task task); \
	double getProjectionTaskDemand(Task task, int bucket, long start, long end); \
	void addWithdrawRequisition(Task task); \
	void removeWithdrawProjection(Task task); \
	void removeWithdrawRequisition(Task task); \
	void addRefillRequisition(Task task); \
	int getLastWithdrawBucket(); \
	int getFirstProjectWithdrawBucket(); \
	int getLastRefillRequisition(); \
	int getLastDemandBucket(); \
	void addRefillProjection(Task task); \
	void setEndOfLevelSixBucket(int bucket); \
	int getEndOfLevelSixBucket(); \
	void removeRefillProjection(Task task); \
	void removeRefillRequisition(Task task); \
	List clearRefillTasks(Date now); \
	List clearRefillProjectionTasks(long now); \
	List getOverlappingRefillProjections(); \
	ArrayList getRefillRequisitions(); \
	ArrayList getRefillProjection(int bucket); \
	double getCriticalLevel(int bucket); \
	double getLevel(int bucket); \
	void setLevel(int bucket, double value); \
	void setTarget(int bucket, double value); \
	void updateRefillRequisition(Task task); \
	void updateWithdrawRequisition(Task task); \
	void updateRefillProjection(Task task); \
	void updateWithdrawProjection(Task task); \
	double getProjectedDemand(int bucket); \
	Collection getProjectedDemandTasks(int bucket); \
	double getActualDemand(int bucket); \
	Collection getActualDemandTasks(int bucket); \
	double getReorderPeriod(); \
	Collection getWithdrawTasks(int bucket); \
	Collection getProjectWithdrawTasks(int bucket); \
	void rebuildCustomerHash(); \
	long convertBucketToTime(int bucket); \
	int  convertTimeToBucket(long time, boolean partialBuckets); \
	long getBucketMillis(); \
	long getStartTime(); \
	int getStartBucket(); \
	HashMap getCustomerHash(); \
  	void logAllToCSVFile(long aCycleStamp);\
	int getCriticalLevel(); \
	boolean getFailuresFlag(); \
	void setFailuresFlag(boolean value); \
	void setArrivalTime(long arrivalTime); \
	long getArrivalTime(); \
	void setStartCDay(long startCTime); \
	void Test(); \
	void takeSnapshot(Inventory inventory); \
	ArrayList getProjWithdrawList(); \
	ArrayList getWithdrawList(); \
	ArrayList getProjSupplyList(); \
	ArrayList getSupplyList(); \
	Schedule  getBufferedCritLevels(); \
	Schedule  getBufferedInvLevels(); \
	Schedule getBufferedTargetLevels(); \
	ArrayList getActualDemandTasksList(); \
	long getEffectiveProjectionStart(Task task, long start); \
	void reinitialize(boolean logToCSV, InventoryPlugin parentPlugin); \
        void clearTargetLevels(int startBucket); \
	void recalculateInitialLevel(); \
	ShortfallInventory checkForShortfall(String invID,String unitOfIssue); \
	String getItemName();

;;
;; examples
;;

;[SamplePG]
;slots=Mass mass, \
;	List<Role> roles, \
;	int matrix(int x, int y)
;weight.doc=The mass of my Asset
