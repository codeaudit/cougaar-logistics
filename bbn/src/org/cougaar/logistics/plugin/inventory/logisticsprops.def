;!generate: org.cougaar.tools.build.PGWriter

; <copyright>
;  Copyright 1997-2003 BBNT Solutions, LLC
;  under sponsorship of the Defense Advanced Research Projects Agency (DARPA).
; 
;  This program is free software; you can redistribute it and/or modify
;  it under the terms of the Cougaar Open Source License as published by
;  DARPA on the Cougaar Open Source Website (www.cougaar.org).
; 
;  THE COUGAAR SOFTWARE AND ANY DERIVATIVE SUPPLIED BY LICENSOR IS
;  PROVIDED 'AS IS' WITHOUT WARRANTIES OF ANY KIND, WHETHER EXPRESS OR
;  IMPLIED, INCLUDING (BUT NOT LIMITED TO) ALL IMPLIED WARRANTIES OF
;  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE, AND WITHOUT
;  ANY WARRANTIES AS TO NON-INFRINGEMENT.  IN NO EVENT SHALL COPYRIGHT
;  HOLDER BE LIABLE FOR ANY DIRECT, SPECIAL, INDIRECT OR CONSEQUENTIAL
;  DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE OF DATA OR PROFITS,
;  TORTIOUS CONDUCT, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
;  PERFORMANCE OF THE COUGAAR SOFTWARE.
; </copyright>
;

package=org.cougaar.logistics.plugin.inventory

import=org.cougaar.logistics.plugin.inventory.InventoryPlugin,\
	org.cougaar.glm.ldm.asset.Inventory,\	
	org.cougaar.glm.ldm.asset.Organization

[LogisticsInventoryPG]
slots=Asset resource, \
      double capacity, \
      double initialLevel, \
      boolean isLevel2, \
      Organization org
delegates=LogisticsInventoryBG logInvBG

logInvBG.delegate= void initialize(long today, int critLevel, int reorderPeriod, long bucketSize, long now, boolean logToCSV, Date startCDay, InventoryPlugin parentPlugin); \
	void addWithdrawProjection(Task task); \
	double getProjectionTaskDemand(Task task, int bucket, long start, long end); \
	void addWithdrawRequisition(Task task); \
	void removeWithdrawProjection(Task task); \
	void removeWithdrawRequisition(Task task); \
	void addRefillRequisition(Task task); \
	int getLastWithdrawBucket(); \
	int getFirstProjectWithdrawBucket(); \
	int getLastRefillRequisition(); \
	int getLastDemandBucket(); \
	void addRefillProjection(Task task); \
	void setEndOfLevelSixBucket(int bucket); \
	int getEndOfLevelSixBucket(); \
	void removeRefillProjection(Task task); \
	void removeRefillRequisition(Task task); \
	List clearRefillTasks(Date now); \
	List clearRefillProjectionTasks(); \
	ArrayList getRefillRequisitions(); \
	Task getRefillProjection(int bucket); \
	double getCriticalLevel(int bucket); \
	double getLevel(int bucket); \
	void setLevel(int bucket, double value); \
	void setTarget(int bucket, double value); \
	void updateRefillRequisition(Task task); \
	void updateWithdrawRequisition(Task task); \
	void updateRefillProjection(Task task); \
	void updateWithdrawProjection(Task task); \
	double getProjectedDemand(int bucket); \
	Collection getProjectedDemandTasks(int bucket); \
	double getActualDemand(int bucket); \
	Collection getActualDemandTasks(int bucket); \
	double getReorderPeriod(); \
	Collection getWithdrawTasks(int bucket); \
	Collection getProjectWithdrawTasks(int bucket); \
	void rebuildCustomerHash(); \
	long convertBucketToTime(int bucket); \
	int  convertTimeToBucket(long time, boolean partialBuckets); \
	long getBucketMillis(); \
	long getStartTime(); \
  	void logAllToCSVFile(long aCycleStamp);\
	int getCriticalLevel(); \
	boolean getFailuresFlag(); \
	void setFailuresFlag(boolean value); \
	void Test(); \
	void takeSnapshot(Inventory inventory); \
	ArrayList getProjWithdrawList(); \
	ArrayList getWithdrawList(); \
	ArrayList getProjSupplyList(); \
	ArrayList getSupplyList(); \
	Schedule  getBufferedCritLevels(); \
	Schedule  getBufferedInvLevels(); \
	Schedule getBufferedTargetLevels(); \
	ArrayList getActualDemandTasksList(); \
	long getEffectiveProjectionStart(Task task, long start); \
	void reinitialize(boolean logToCSV, Date startCDay, InventoryPlugin parentPlugin); \
        void clearTargetLevels(int startBucket);

;;
;; examples
;;

;[SamplePG]
;slots=Mass mass, \
;	List<Role> roles, \
;	int matrix(int x, int y)
;weight.doc=The mass of my Asset
